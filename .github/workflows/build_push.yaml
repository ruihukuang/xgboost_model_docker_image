name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main  # Change this to your default branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Run AWS CLI Command
      run: |
        aws s3 ls
  
  
    - name: Update IAM Policy
      run: |
        POLICY_NAME="MyCustomPolicy_Cloudformation_IAM"
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
        
        if [ -z "$POLICY_ARN" ]; then
          echo "Policy not found. Creating new policy."
          POLICY_ARN=$(aws iam create-policy --policy-name $POLICY_NAME --policy-document file://Policy/Cloudformation_IAM.json --query 'Policy.Arn' --output text)
          aws iam attach-user-policy --user-name Janice --policy-arn $POLICY_ARN
        else
          echo "Policy already exists. No action needed."
        fi

        aws iam attach-user-policy --user-name Janice --policy-arn $POLICY_ARN   

    - name: Log in to Amazon ECR
      run: |
        aws ecr-public  get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws

    - name: Check if ECR Repository Exists
      id: check_repo
      run: |
        if aws ecr-public describe-repositories --repository-names ${{ secrets.RESPOSITORY_NAME }} --region ${{ secrets.AWS_REGION }}; then
          echo "repository_exists=true" >> $GITHUB_ENV
        else
          echo "repository_exists=false" >> $GITHUB_ENV
        fi
        
    - name: Create a Public ECR Repository for Model Artifacts
      if: env.repository_exists == 'false'
      run: |
        aws ecr-public create-repository --repository-name ${{ secrets.RESPOSITORY_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Set Repository Policy
      if: env.repository_exists == 'false'
      run: |
        aws ecr-public set-repository-policy --repository-name ${{ secrets.RESPOSITORY_NAME }} --region ${{ secrets.AWS_REGION }} --policy-text '{
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "AllowPublicRead",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
              ]
            }
          ]
        }'     

    - name: Check if a basic python Image Exists in ECR
      id: check_image
      run: |
        set -e
        if aws ecr-public describe-images --repository-name ${{ secrets.RESPOSITORY_NAME }} --image-ids imageTag=python-3.11 --region ${{ secrets.AWS_REGION }}; then
          echo "image_exists=true" >> $GITHUB_ENV
        else
          echo "image_exists=false" >> $GITHUB_ENV
        fi

    - name: Pull, Tag, and Push if Image Not Found
      if: env.image_exists == 'false'
      env:
        ECR_REGISTRY: public.ecr.aws
        ECR_REPOSITORY: ${{ secrets.RESPOSITORY_NAME }} 
        REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Log in to Amazon ECR Public
        aws ecr-public get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        docker pull python:3.11
        docker tag python:3.11 $ECR_REGISTRY/$ECR_REPOSITORY:python-3.11
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:python-3.11

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: public.ecr.aws
        ECR_REPOSITORY: ${{ secrets.RESPOSITORY_NAME }} 
        IMAGE_TAG: ${{ github.sha }}_xgboost
        REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Log in to Amazon ECR Public
        aws ecr-public get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ECR_REGISTRY=$ECR_REGISTRY --build-arg ECR_REPOSITORY=$ECR_REPOSITORY   .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
